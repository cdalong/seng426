diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..961b1c3
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,11 @@
+/*/node_modules
+
+/.metadata/
+/.recommenders/
+/*/.project
+/*/.classpath
+/*/target/
+/*/.settings/
+/*/bin/
+/acme-1.0.1-src/src/main/resources/config/application-dev.yml
+*.log
diff --git a/acme-1.0.1-src/src/main/java/com/acme/service/ACMEPassService.java b/acme-1.0.1-src/src/main/java/com/acme/service/ACMEPassService.java
index df61f7a..f905a70 100644
--- a/acme-1.0.1-src/src/main/java/com/acme/service/ACMEPassService.java
+++ b/acme-1.0.1-src/src/main/java/com/acme/service/ACMEPassService.java
@@ -89,7 +89,7 @@ public class ACMEPassService {
 	public void delete(Long id) {
 		log.debug("Request to delete ACMEPass : {}", id);
 
-		if (acmePassRepository.findOne(id).getUser().equals(SecurityUtils.getCurrentUser())) {
+		if (acmePassRepository.findOne(id).getUser().equals(userService.getCurrentUser())) {
             acmePassRepository.delete(id);
         }
 	}
diff --git a/acme-1.0.1-src/src/main/webapp/app/components/login/login.html b/acme-1.0.1-src/src/main/webapp/app/components/login/login.html
index 89f6527..9858a4a 100644
--- a/acme-1.0.1-src/src/main/webapp/app/components/login/login.html
+++ b/acme-1.0.1-src/src/main/webapp/app/components/login/login.html
@@ -27,7 +27,7 @@
                         <span>Remember me</span>
                     </label>
                 </div>
-                <button type="submit" class="btn btn-primary">Sign in</button>
+                <button type="submit"  id="login" class="btn btn-primary">Sign in</button>
             </form>
             <p></p>
             <hr/>
@@ -35,9 +35,9 @@
                 <a class="alert-link" href="" ng-click="vm.requestResetPassword()">Did you forget your password?</a>
             </div>
             <div class="col-md-6 ">
-				<a class="alert-link pull-right" href="" ng-click="vm.register()">Register a new account</a>
+                 <a class="alert-link pull-right" href="" ng-click="vm.register()">Register a new account</a>
             </div>
-
+            
             <hr/>
         </div>
     </div>
diff --git a/acme-1.0.1-src/src/main/webapp/app/entities/acme-pass/acme-pass-dialog.html b/acme-1.0.1-src/src/main/webapp/app/entities/acme-pass/acme-pass-dialog.html
index dcda892..1160102 100644
--- a/acme-1.0.1-src/src/main/webapp/app/entities/acme-pass/acme-pass-dialog.html
+++ b/acme-1.0.1-src/src/main/webapp/app/entities/acme-pass/acme-pass-dialog.html
@@ -45,9 +45,9 @@
 			<div class="col-lg-10" style="padding: 0;">
 				<label class="control-label" for="field_password">Password</label>
 				<div>
-					<input type="password" class="form-control" name="password" id="field_password"
+					<input type="{{vm.pwdVisible ? 'text' : 'password'}}" class="form-control" name="password" id="field_password"
 						   ng-model="vm.acmePass.password" required />
-					<span class="glyphicon glyphicon-eye-open" style="float:right; cursor: pointer; margin: -23px 16px 0px 0;"></span>
+					<span ng-click="vm.pwdVisible = !vm.pwdVisible" class="glyphicon {{vm.pwdVisible ? 'glyphicon-eye-close' : 'glyphicon-eye-open'}}" style="float:right; cursor: pointer; margin: -23px 16px 0px 0;"></span>
 				</div>
 				<div ng-show="editForm.password.$invalid">
 					<p class="help-block" ng-show="editForm.password.$error.required">
diff --git a/acme-1.0.1-src/src/main/webapp/app/entities/acme-pass/acme-pass-pwd-gen.controller.js b/acme-1.0.1-src/src/main/webapp/app/entities/acme-pass/acme-pass-pwd-gen.controller.js
index eb37398..8038081 100644
--- a/acme-1.0.1-src/src/main/webapp/app/entities/acme-pass/acme-pass-pwd-gen.controller.js
+++ b/acme-1.0.1-src/src/main/webapp/app/entities/acme-pass/acme-pass-pwd-gen.controller.js
@@ -58,16 +58,19 @@
                 chars += vm.chars.special;
             }
 
+            if (chars.length == 0)
+            	return;
+            
+            var rndChars = chars;
             for (var i = 0; i < vm.genOptions.length; i++) {
-                var position = Math.round(Math.random() * chars.length);
-
-                if (vm.genOptions.repetition) {
-                    if (vm.password.indexOf(chars[position]) === -1) {
-                        vm.password += chars[position];
-                    }
-                } else {
-                    vm.password += chars[position];
-                }
+                var position = Math.floor(Math.random() * chars.length);
+
+                vm.password += chars[position];
+                
+                if (vm.genOptions.repetition)
+                	chars = chars.substr(0, position) + chars.substr(position + 1)
+            	if (chars === "")
+            		chars = rndChars;
             }
         }
 
diff --git a/acme-1.0.1-src/src/main/webapp/app/entities/acme-pass/acme-pass.controller.js b/acme-1.0.1-src/src/main/webapp/app/entities/acme-pass/acme-pass.controller.js
index baf209a..ebbba4a 100644
--- a/acme-1.0.1-src/src/main/webapp/app/entities/acme-pass/acme-pass.controller.js
+++ b/acme-1.0.1-src/src/main/webapp/app/entities/acme-pass/acme-pass.controller.js
@@ -15,7 +15,9 @@
         vm.reverse = pagingParams.ascending;
         vm.transition = transition;
         vm.itemsPerPage = paginationConstants.itemsPerPage;
+        vm.isVisible = isVisible;
         vm.toggleVisible = toggleVisible;
+        vm.pwdVisible = {};
 
         loadAll();
 
@@ -50,9 +52,13 @@
             vm.page = page;
             vm.transition();
         }
+        
+        function isVisible(id) {
+            return Boolean(vm.pwdVisible[id]);
+        }
 
         function toggleVisible(id) {
-            //TODO show password and change eye icon
+    	    vm.pwdVisible[id] = !vm.pwdVisible[id];
         }
 
         function transition() {
diff --git a/acme-1.0.1-src/src/main/webapp/app/entities/acme-pass/acme-passes.html b/acme-1.0.1-src/src/main/webapp/app/entities/acme-pass/acme-passes.html
index e8aca6e..dd2685c 100644
--- a/acme-1.0.1-src/src/main/webapp/app/entities/acme-pass/acme-passes.html
+++ b/acme-1.0.1-src/src/main/webapp/app/entities/acme-pass/acme-passes.html
@@ -41,8 +41,8 @@
                     <td>{{acmePass.login}}</td>
                     <td>
 						<div>
-							<input type="password" ng-model="acmePass.password" class="acmepass-password" style="font-size: 1.6em; margin: -5px 0;" readonly/>
-							<span ng-click="vm.toggleVisible(acmePass.id)" style="float:right; cursor: pointer; padding: 5px 20px 0 0;" class="glyphicon glyphicon-eye-open"></span>
+							<input type="{{vm.isVisible(acmePass.id) ? 'text' : 'password'}}" ng-model="acmePass.password" class="acmepass-password" style="font-size: 1.6em; margin: -5px 0;" readonly />
+							<span ng-click="vm.toggleVisible(acmePass.id)" style="float:right; cursor: pointer; padding: 5px 20px 0 0;" class="glyphicon {{vm.isVisible(acmePass.id) ? 'glyphicon-eye-close' : 'glyphicon-eye-open'}}"></span>
 						</div>
 					</td>
                     <td>{{acmePass.createdDate| date:'medium'}}</td>
diff --git a/acme-1.0.1-src/webapp/app/components/login/login.html b/acme-1.0.1-src/webapp/app/components/login/login.html
index 8698d20..9858a4a 100644
--- a/acme-1.0.1-src/webapp/app/components/login/login.html
+++ b/acme-1.0.1-src/webapp/app/components/login/login.html
@@ -27,7 +27,7 @@
                         <span>Remember me</span>
                     </label>
                 </div>
-                <button type="submit" class="btn btn-primary">Sign in</button>
+                <button type="submit"  id="login" class="btn btn-primary">Sign in</button>
             </form>
             <p></p>
             <hr/>
diff --git a/tests/src/geckodriver b/tests/src/geckodriver
new file mode 100644
index 0000000..84f6612
Binary files /dev/null and b/tests/src/geckodriver differ
diff --git a/tests/src/tests/CanConnect.java b/tests/src/tests/CanConnect.java
new file mode 100644
index 0000000..bc740bd
--- /dev/null
+++ b/tests/src/tests/CanConnect.java
@@ -0,0 +1,39 @@
+package tests;
+
+import static org.junit.Assert.*;
+
+import java.util.concurrent.TimeUnit;
+
+import org.junit.*;
+import org.openqa.selenium.WebDriver;
+
+import util.WebDriverFactory;
+
+public class CanConnect {
+	
+	private WebDriver driver;
+	private String baseUrl = "http://localhost:8080";
+
+	@Before
+	public void setUp() throws Exception {
+		if (System.getProperty("url") != null)
+			baseUrl = System.getProperty("url");
+		
+		driver = WebDriverFactory.Create();
+		driver.manage().timeouts().implicitlyWait(2, TimeUnit.SECONDS);
+	}
+	
+	@After
+	public void tearDown() throws Exception {
+		driver.quit();
+	}
+	
+	@Test
+	public void testConnect() throws Exception {
+		
+		driver.get(baseUrl);
+		
+		assertEquals(driver.getTitle(), "ACME Security Systems");
+		
+	}
+}
diff --git a/tests/src/tests/CreateACMEPass.java b/tests/src/tests/CreateACMEPass.java
new file mode 100644
index 0000000..4d65e78
--- /dev/null
+++ b/tests/src/tests/CreateACMEPass.java
@@ -0,0 +1,95 @@
+package tests;
+
+import static org.junit.Assert.*;
+
+import java.util.concurrent.TimeUnit;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.openqa.selenium.By;
+import org.openqa.selenium.WebDriver;
+import org.openqa.selenium.support.ui.ExpectedConditions;
+import org.openqa.selenium.support.ui.WebDriverWait;
+
+import util.ServerConfig;
+import util.WebDriverFactory;
+
+public class CreateACMEPass {
+	
+	private WebDriver driver;
+	private WebDriverWait wait;
+	private String baseUrl = "http://localhost:8080";
+
+	@Before
+	public void setup() throws Exception {
+		if (System.getProperty("url") != null)
+			baseUrl = System.getProperty("url");
+
+		ServerConfig.Setup(baseUrl, 5);
+
+		driver = WebDriverFactory.Create();
+		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
+		driver.manage().timeouts().pageLoadTimeout(10, TimeUnit.SECONDS);
+		driver.manage().timeouts().setScriptTimeout(5, TimeUnit.SECONDS);
+		wait = new WebDriverWait(driver, 5);
+		
+		driver.get(baseUrl + "/#/");
+		driver.findElement(By.id("login")).click();
+		driver.findElement(By.id("username")).clear();
+		driver.findElement(By.id("username")).sendKeys("test@acme.com");
+		driver.findElement(By.id("password")).clear();
+		driver.findElement(By.id("password")).sendKeys("test");
+		driver.findElement(By.cssSelector("button.btn.btn-primary")).click();
+		wait.until(ExpectedConditions.elementToBeClickable(By.id("account-menu")));
+	}
+
+	@After
+	public void tearDown() {
+		driver.quit();
+	}
+
+	@Test
+	public void testCreateACME() {
+		
+		driver.get(baseUrl + "/#/acme-pass");
+		By navLocator = By.xpath("/html/body/div[3]/div/div/div[3]/jhi-item-count/div");
+		wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("button[href='#/acme-pass/new']")));
+		
+		// Record the number of items existing as reported by the interface.
+		String navMessage = driver.findElement(navLocator).getText(); // showing x - y of z items
+		String[] parts = navMessage.split(" ");
+		int countBefore = Integer.parseInt(parts[5]);
+		
+		// Create a test entry.
+		driver.findElement(By.cssSelector("button[href='#/acme-pass/new']")).click();
+		driver.findElement(By.cssSelector("input#field_site")).sendKeys("test site");
+		driver.findElement(By.cssSelector("input#field_login")).sendKeys("test login");
+		driver.findElement(By.cssSelector("input#field_password")).sendKeys("test pass");
+		driver.findElement(By.cssSelector("button[type=submit]")).click();
+		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//pre[1]")));
+		
+		String createMessage = driver.findElement(By.xpath("//pre[1]")).getText();
+		
+		navMessage = driver.findElement(navLocator).getText();
+		parts = navMessage.split(" ");
+		int countAfter = Integer.parseInt(parts[5]);
+		
+		// Order by id descending so the newly created password is at the top.
+		driver.findElement(By.xpath("//th[@jh-sort-by='id']")).click();
+		wait.until(ExpectedConditions.attributeContains(By.xpath("//th[@jh-sort-by='id']/span[2]"), "class", "glyphicon-sort-by-attributes"));
+		
+		String idNew = driver.findElement(By.xpath("//tr[1]/td[1]")).getText();
+		String siteNew = driver.findElement(By.xpath("//tr[1]/td[2]")).getText();
+		String loginNew = driver.findElement(By.xpath("//tr[1]/td[3]")).getText();
+		String passwordNew = driver.findElement(By.xpath("//tr[1]/td[4]/div/input")).getAttribute("value");
+		
+		// assert if new entry is added to table
+		assertEquals(countBefore + 1, countAfter);
+		assertEquals(siteNew, "test site");
+		assertEquals(loginNew, "test login");
+		assertEquals(passwordNew, "test pass");
+		assertTrue(createMessage.contains(idNew));
+	}
+
+}
diff --git a/tests/src/tests/DeletePasswords.java b/tests/src/tests/DeletePasswords.java
new file mode 100644
index 0000000..d4c3f47
--- /dev/null
+++ b/tests/src/tests/DeletePasswords.java
@@ -0,0 +1,71 @@
+package tests;
+
+import static org.junit.Assert.*;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.openqa.selenium.*;
+import org.openqa.selenium.support.ui.ExpectedConditions;
+import org.openqa.selenium.support.ui.WebDriverWait;
+
+import java.util.concurrent.TimeUnit;
+
+import util.ServerConfig;
+import util.WebDriverFactory;
+
+public class DeletePasswords {
+	
+	private WebDriver driver;
+	private WebDriverWait wait;
+	private String baseUrl = "http://localhost:8080";
+
+	@Before
+	public void setUp() throws Exception {
+		if (System.getProperty("url") != null)
+			baseUrl = System.getProperty("url");
+		
+		ServerConfig.Setup(baseUrl, 5);
+
+		driver = WebDriverFactory.Create();
+		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
+		driver.manage().timeouts().pageLoadTimeout(10, TimeUnit.SECONDS);
+		driver.manage().timeouts().setScriptTimeout(5, TimeUnit.SECONDS);
+		wait = new WebDriverWait(driver, 5);
+		
+		driver.get(baseUrl + "/#/");
+		driver.findElement(By.id("login")).click();
+		driver.findElement(By.id("username")).clear();
+		driver.findElement(By.id("username")).sendKeys("test@acme.com");
+		driver.findElement(By.id("password")).clear();
+		driver.findElement(By.id("password")).sendKeys("test");
+		driver.findElement(By.cssSelector("button.btn.btn-primary")).click();
+		wait.until(ExpectedConditions.elementToBeClickable(By.id("account-menu")));
+	}
+
+	@After
+	public void tearDown() throws Exception {
+		driver.quit();
+	}
+
+	@Test
+	public void test() {
+		
+		driver.get(baseUrl + "/#/acme-pass");
+		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//tr[1]/td[1]")));
+		
+		// Open the delete password dialogue box and cofirm the delete.
+		String idBefore = driver.findElement(By.xpath("//tr[1]/td[1]")).getText();
+		driver.findElement(By.xpath("//tr[1]/td[7]/div/button[2]")).click();
+		driver.findElement(By.cssSelector("button.btn.btn-danger")).click();
+		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//pre[1]")));
+		
+		// Check both the feedback message and the id of the cell where the password was deleted.
+		String message = driver.findElement(By.xpath("//pre[1]")).getText();
+		String idAfter = driver.findElement(By.xpath("//tr[1]/td[1]")).getText();
+
+		assertNotEquals(idBefore, idAfter);
+		assertTrue(message.contains(idBefore));
+	}
+
+}
diff --git a/tests/src/tests/EditPassword.java b/tests/src/tests/EditPassword.java
new file mode 100644
index 0000000..2eda724
--- /dev/null
+++ b/tests/src/tests/EditPassword.java
@@ -0,0 +1,86 @@
+package tests;
+
+import static org.junit.Assert.*;
+
+import java.util.concurrent.TimeUnit;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.openqa.selenium.By;
+import org.openqa.selenium.WebDriver;
+import org.openqa.selenium.support.ui.ExpectedConditions;
+import org.openqa.selenium.support.ui.WebDriverWait;
+
+import util.ServerConfig;
+import util.WebDriverFactory;
+
+public class EditPassword {
+
+    private WebDriver driver;
+    private WebDriverWait wait;
+	private String baseUrl = "http://localhost:8080";
+
+    @Before
+    public void setup() throws Exception {
+		if (System.getProperty("url") != null)
+			baseUrl = System.getProperty("url");
+		
+		ServerConfig.Setup(baseUrl, 5);
+
+		driver = WebDriverFactory.Create();
+		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
+		driver.manage().timeouts().pageLoadTimeout(10, TimeUnit.SECONDS);
+		driver.manage().timeouts().setScriptTimeout(5, TimeUnit.SECONDS);
+		wait = new WebDriverWait(driver, 5);
+		
+		driver.get(baseUrl + "/#/");
+		driver.findElement(By.id("login")).click();
+		driver.findElement(By.id("username")).clear();
+		driver.findElement(By.id("username")).sendKeys("test@acme.com");
+		driver.findElement(By.id("password")).clear();
+		driver.findElement(By.id("password")).sendKeys("test");
+		driver.findElement(By.cssSelector("button.btn.btn-primary")).click();
+		wait.until(ExpectedConditions.elementToBeClickable(By.id("account-menu")));
+    }
+
+    @Test
+    public void testEdit() throws Exception {
+		
+    	driver.get(baseUrl + "/#/acme-pass");
+		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//tr[1]")));
+		
+		// Open the edit password dialogue box.
+		String idBefore = driver.findElement(By.xpath("//tr[1]/td[1]")).getText();
+		driver.findElement(By.xpath("//tr[1]/td[7]/div/button[1]")).click();
+		wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("button[type=submit]")));
+		
+		// Input new password data and confirm the edit.
+		driver.findElement(By.id("field_site")).clear();
+		driver.findElement(By.id("field_login")).clear();
+		driver.findElement(By.id("field_password")).clear();
+		driver.findElement(By.id("field_site")).sendKeys("edit_foo");
+		driver.findElement(By.id("field_login")).sendKeys("edit_foo2");
+		driver.findElement(By.id("field_password")).sendKeys("edit_foo3");
+		driver.findElement(By.cssSelector("button[type=submit]")).click();
+		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//pre[1]")));
+		
+		String message = driver.findElement(By.xpath("//pre[1]")).getText();
+		String idAfter = driver.findElement(By.xpath("//tr[1]/td[1]")).getText();
+		String siteAfter = driver.findElement(By.xpath("//tr[1]/td[2]")).getText();
+		String loginAfter = driver.findElement(By.xpath("//tr[1]/td[3]")).getText();
+		String passwordAfter = driver.findElement(By.xpath("//tr[1]/td[4]/div/input")).getAttribute("value");
+        
+		assertEquals(idBefore, idAfter);
+		assertEquals(siteAfter, "edit_foo");
+		assertEquals(loginAfter, "edit_foo2");
+		assertEquals(passwordAfter, "edit_foo3");
+		assertTrue(message.contains(idBefore));
+    }
+
+    @After
+    public void finish() {
+        this.driver.close();
+    }
+
+}
diff --git a/tests/src/tests/GeneratePassword.java b/tests/src/tests/GeneratePassword.java
new file mode 100644
index 0000000..7c0ac25
--- /dev/null
+++ b/tests/src/tests/GeneratePassword.java
@@ -0,0 +1,131 @@
+package tests;
+
+import static org.junit.Assert.*;
+
+import org.apache.commons.lang3.StringUtils;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.openqa.selenium.*;
+import org.openqa.selenium.support.ui.ExpectedConditions;
+import org.openqa.selenium.support.ui.WebDriverWait;
+
+import java.util.concurrent.TimeUnit;
+
+import util.ServerConfig;
+import util.WebDriverFactory;
+
+public class GeneratePassword {
+	
+	private WebDriver driver;
+	private WebDriverWait wait;
+	private String baseUrl = "http://localhost:8080";
+
+	@Before
+	public void setUp() throws Exception {
+		if (System.getProperty("url") != null)
+			baseUrl = System.getProperty("url");
+		
+		ServerConfig.Setup(baseUrl, 5);
+
+		driver = WebDriverFactory.Create();
+		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
+		driver.manage().timeouts().pageLoadTimeout(10, TimeUnit.SECONDS);
+		driver.manage().timeouts().setScriptTimeout(5, TimeUnit.SECONDS);
+		wait = new WebDriverWait(driver, 5);
+		
+		driver.get(baseUrl + "/#/");
+		driver.findElement(By.id("login")).click();
+		driver.findElement(By.id("username")).clear();
+		driver.findElement(By.id("username")).sendKeys("test@acme.com");
+		driver.findElement(By.id("password")).clear();
+		driver.findElement(By.id("password")).sendKeys("test");
+		driver.findElement(By.cssSelector("button.btn.btn-primary")).click();
+		wait.until(ExpectedConditions.elementToBeClickable(By.id("account-menu")));
+	}
+
+	@After
+	public void tearDown() throws Exception {
+		driver.quit();
+	}
+
+	@Test
+	public void test() {
+		
+		driver.get(baseUrl + "/#/acme-pass");
+		wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("button[href='#/acme-pass/new']")));
+		
+		// Open the generate password dialogue box.
+	    driver.findElement(By.cssSelector("button[href='#/acme-pass/new']")).click();
+	    wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("button[ng-click='vm.openPwdGenModal()']")));
+	    driver.findElement(By.cssSelector("button[ng-click='vm.openPwdGenModal()']")).click();
+	    wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("button[ng-click='vm.generate()']")));
+	    
+	    // Record the requested length for generated passwords.
+	    String lenString = driver.findElement(By.id("field_length")).getAttribute("value");
+	    int defaultLength = Integer.parseInt(lenString);
+
+	    WebElement passwordField = driver.findElement(By.id("field_password"));
+	    
+	    // Generate a password with all characters.
+	    driver.findElement(By.cssSelector("button[ng-click='vm.generate()']")).click();
+	    wait.until(ExpectedConditions.attributeToBeNotEmpty(passwordField, "value"));
+	    String generated1 = passwordField.getAttribute("value");
+	    
+	    // Generate a password without special characters.
+	    driver.findElement(By.id("field_special")).click();
+	    driver.findElement(By.cssSelector("button[ng-click='vm.generate()']")).click();
+	    wait.until(ExpectedConditions.not(ExpectedConditions.attributeToBe(passwordField, "value", generated1)));
+	    String generated2 = passwordField.getAttribute("value");
+	    
+	    // Generate a password without special characters or digits.
+	    driver.findElement(By.id("field_digits")).click();
+	    driver.findElement(By.cssSelector("button[ng-click='vm.generate()']")).click();
+	    wait.until(ExpectedConditions.not(ExpectedConditions.attributeToBe(passwordField, "value", generated2)));
+	    String generated3 = passwordField.getAttribute("value");
+	    
+	    // Generate a password without special characters, digits, or uppercase letters.
+	    driver.findElement(By.id("field_upper")).click();
+	    driver.findElement(By.cssSelector("button[ng-click='vm.generate()']")).click();
+	    wait.until(ExpectedConditions.not(ExpectedConditions.attributeToBe(passwordField, "value", generated3)));
+	    String generated4 = passwordField.getAttribute("value");
+	    
+	    // Generate a password with no options enabled.
+	    driver.findElement(By.id("field_lower")).click();
+	    driver.findElement(By.cssSelector("button[ng-click='vm.generate()']")).click();
+	    wait.until(ExpectedConditions.not(ExpectedConditions.attributeToBe(passwordField, "value", generated4)));
+	    String generated5 = passwordField.getAttribute("value");
+
+	    // Generate a 10 digit password with no repetitions.
+	    driver.findElement(By.id("field_digits")).click();
+	    driver.findElement(By.id("field_repetition")).click();
+	    driver.findElement(By.id("field_length")).clear();
+	    driver.findElement(By.id("field_length")).sendKeys("10");
+	    driver.findElement(By.cssSelector("button[ng-click='vm.generate()']")).click();
+	    wait.until(ExpectedConditions.not(ExpectedConditions.attributeToBe(passwordField, "value", generated5)));
+	    String generated6 = passwordField.getAttribute("value");
+
+	    // Accept the generated password.
+	    driver.findElement(By.cssSelector("button[type='submit']")).click();
+	    String accepted = driver.findElement(By.id("field_password")).getAttribute("value");
+	    
+	    String lower = "abcdefghijklmnopqrstuvwxyz";
+	    String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
+	    String digits = "01234567890";
+	    String special = "!@#$%-_";
+	    
+	    assertTrue(generated1.length() == defaultLength);
+	    assertTrue(generated2.length() == defaultLength);
+	    assertTrue(generated3.length() == defaultLength);
+	    assertTrue(generated4.length() == defaultLength);
+	    assertTrue(generated5.length() == 0);
+	    assertTrue(generated6.length() == 10);
+	    assertTrue(generated2.chars().allMatch(x -> special.indexOf(x) == -1));
+	    assertTrue(generated3.chars().allMatch(x -> digits.indexOf(x) == -1));
+	    assertTrue(generated4.chars().allMatch(x -> upper.indexOf(x) == -1));
+	    assertTrue(generated5.chars().allMatch(x -> lower.indexOf(x) == -1));
+	    assertTrue(generated6.chars().allMatch(x -> digits.indexOf(x) != -1));
+	    assertTrue(digits.chars().allMatch(x -> StringUtils.countMatches(generated6, (char)x) == 1));
+	    assertEquals(generated6, accepted);
+	}	
+}
\ No newline at end of file
diff --git a/tests/src/tests/Pagination.java b/tests/src/tests/Pagination.java
new file mode 100644
index 0000000..b589999
--- /dev/null
+++ b/tests/src/tests/Pagination.java
@@ -0,0 +1,98 @@
+package tests;
+
+import static org.junit.Assert.*;
+
+import java.util.ArrayList;
+import java.util.concurrent.TimeUnit;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.openqa.selenium.By;
+import org.openqa.selenium.WebDriver;
+import org.openqa.selenium.support.ui.ExpectedConditions;
+import org.openqa.selenium.support.ui.WebDriverWait;
+
+import util.ServerConfig;
+import util.WebDriverFactory;
+
+public class Pagination {
+
+	private WebDriver driver;
+	private WebDriverWait wait;
+	private String baseUrl = "http://localhost:8080";
+	
+	@Before
+	public void setUp() throws Exception {
+		if (System.getProperty("url") != null)
+			baseUrl = System.getProperty("url");
+		
+		ServerConfig.Setup(baseUrl, 45);
+
+		driver = WebDriverFactory.Create();
+		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
+		driver.manage().timeouts().pageLoadTimeout(10, TimeUnit.SECONDS);
+		driver.manage().timeouts().setScriptTimeout(5, TimeUnit.SECONDS);
+		wait = new WebDriverWait(driver, 5);
+		
+		driver.get(baseUrl + "/#/");
+		driver.findElement(By.id("login")).click();
+		driver.findElement(By.id("username")).clear();
+		driver.findElement(By.id("username")).sendKeys("test@acme.com");
+		driver.findElement(By.id("password")).clear();
+		driver.findElement(By.id("password")).sendKeys("test");
+		driver.findElement(By.cssSelector("button.btn.btn-primary")).click();
+		wait.until(ExpectedConditions.elementToBeClickable(By.id("account-menu")));
+	}
+	
+	@After
+	public void tearDown() throws Exception {
+		driver.quit();
+	}
+	
+	@Test
+	public void test() throws Exception {
+
+		driver.get(baseUrl + "/#/acme-pass");
+
+		By navLocator = By.xpath("/html/body/div[3]/div/div/div[3]/jhi-item-count/div");
+		wait.until(ExpectedConditions.elementToBeClickable(navLocator));
+		String navMessage = driver.findElement(navLocator).getText();
+
+		// Get the total number of items, items shown and pages.
+		String[] stringArray = navMessage.split(" "); 		// showing x - y of z items
+		int totalnumberofrecords = Integer.parseInt(stringArray[5]);
+		int recordsperpage = Integer.parseInt(stringArray[3]);
+		int clickcount = (totalnumberofrecords - 1) / recordsperpage;
+		
+		// Step forward through each page and record the page indices.
+		ArrayList<Integer> pageIndicesFwd = new ArrayList<Integer>();
+		pageIndicesFwd.add(Integer.parseInt(stringArray[1]));
+		for (int i = 0; i < clickcount; i++) {	
+			driver.findElement(By.xpath("/html/body/div[3]/div/div/ul/li[2]/a")).click();
+			wait.until(ExpectedConditions.elementToBeClickable(navLocator));
+			wait.until(ExpectedConditions.not(ExpectedConditions.textToBe(navLocator, navMessage)));
+			navMessage = driver.findElement(navLocator).getText();
+			stringArray = navMessage.split(" ");
+			pageIndicesFwd.add(Integer.parseInt(stringArray[1]));
+		}
+		
+		// Step backwards through each page and record the page indices.
+		ArrayList<Integer> pageIndicesBack = new ArrayList<Integer>();
+		pageIndicesBack.add(Integer.parseInt(stringArray[1]));
+		for (int i = 0; i < clickcount; i++) {	
+			driver.findElement(By.xpath("/html/body/div[3]/div/div/ul/li[1]/a")).click();
+			wait.until(ExpectedConditions.elementToBeClickable(navLocator));
+			wait.until(ExpectedConditions.not(ExpectedConditions.textToBe(navLocator, navMessage)));
+			navMessage = driver.findElement(navLocator).getText();
+			stringArray = navMessage.split(" ");
+			pageIndicesBack.add(Integer.parseInt(stringArray[1]));
+		}
+		
+		for (int i = 0; i < pageIndicesFwd.size(); ++i)
+			assertEquals((int)pageIndicesFwd.get(i), 1 + i * recordsperpage);
+		for (int i = 0; i < pageIndicesFwd.size(); ++i)
+			assertEquals((int)pageIndicesBack.get(i), 1 + (pageIndicesFwd.size() - i - 1) * recordsperpage);
+	}
+
+}
diff --git a/tests/src/tests/Sort.java b/tests/src/tests/Sort.java
new file mode 100644
index 0000000..b70d3ad
--- /dev/null
+++ b/tests/src/tests/Sort.java
@@ -0,0 +1,295 @@
+package tests;
+
+import static org.junit.Assert.*;
+
+import java.text.DateFormat;
+import java.text.SimpleDateFormat;
+import java.util.Arrays;
+import java.util.Date;
+import java.util.List;
+import java.util.concurrent.TimeUnit;
+
+import org.apache.commons.lang3.ArrayUtils;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.openqa.selenium.By;
+import org.openqa.selenium.WebDriver;
+import org.openqa.selenium.WebElement;
+import org.openqa.selenium.support.ui.ExpectedConditions;
+import org.openqa.selenium.support.ui.WebDriverWait;
+
+import util.ServerConfig;
+import util.WebDriverFactory;
+
+public class Sort {
+	
+	private static WebDriver driver;
+	private static WebDriverWait wait;
+	private static String baseUrl = "http://localhost:8080";
+
+	@BeforeClass
+	public static void setUpOnce() throws Exception {
+		if (System.getProperty("url") != null)
+			baseUrl = System.getProperty("url");
+		
+		ServerConfig.Setup(baseUrl, 5);
+
+		driver = WebDriverFactory.Create();
+		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
+		driver.manage().timeouts().pageLoadTimeout(10, TimeUnit.SECONDS);
+		driver.manage().timeouts().setScriptTimeout(5, TimeUnit.SECONDS);
+		wait = new WebDriverWait(driver, 5);
+		
+		driver.get(baseUrl + "/#/");
+		driver.findElement(By.id("login")).click();
+		driver.findElement(By.id("username")).clear();
+		driver.findElement(By.id("username")).sendKeys("test@acme.com");
+		driver.findElement(By.id("password")).clear();
+		driver.findElement(By.id("password")).sendKeys("test");
+		driver.findElement(By.cssSelector("button.btn.btn-primary")).click();
+		wait.until(ExpectedConditions.elementToBeClickable(By.id("account-menu")));
+	}
+	
+	@AfterClass
+	public static void tearDownOnce() throws Exception {
+		driver.quit();
+	}
+
+	@Test	
+	public void testID() throws Exception {
+		
+		driver.get(baseUrl + "/#/acme-pass");
+		wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("div.table-responsive")));
+		
+		List<WebElement> data = driver.findElements(By.xpath("/html/body/div[3]/div/div/div[2]/table/tbody/tr/td[1]"));
+		
+		int[] array = new int[data.size()];
+		for (int i = 0; i < data.size(); i++)
+			array[i] = Integer.parseInt(data.get(i).getText());
+		
+		int[] sortedArray = array.clone();
+		Arrays.sort(sortedArray);
+		
+		assertTrue(Arrays.equals(array, sortedArray));
+	}
+	
+	@Test
+	public void testIDRev() throws Exception {
+		
+		driver.get(baseUrl + "/#/acme-pass");
+		wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("div.table-responsive")));
+		
+		String xpath = "//th[@jh-sort-by='id']";
+		driver.findElement(By.xpath(xpath)).click();
+		wait.until(ExpectedConditions.attributeContains(By.xpath(xpath + "/span[2]"), "class", "glyphicon-sort-by-attributes"));
+
+		List<WebElement> data = driver.findElements(By.xpath("/html/body/div[3]/div/div/div[2]/table/tbody/tr/td[1]"));
+		
+		int[] array = new int[data.size()];
+		for (int i = 0; i < data.size(); i++)
+			array[i] = Integer.parseInt(data.get(i).getText());
+		
+		int[] sortedArray = array.clone();
+		Arrays.sort(sortedArray);
+		ArrayUtils.reverse(sortedArray);
+		
+		assertTrue(Arrays.equals(array, sortedArray));
+	}
+	
+	@Test
+	public void testSite() throws Exception {
+		
+		driver.get(baseUrl + "/#/acme-pass");
+		wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("div.table-responsive")));
+			
+		String xpath = "//th[@jh-sort-by='site']";
+		driver.findElement(By.xpath(xpath)).click();
+		wait.until(ExpectedConditions.attributeContains(By.xpath(xpath + "/span[2]"), "class", "glyphicon-sort-by-attributes-alt"));
+		
+		List<WebElement> data = driver.findElements(By.xpath("/html/body/div[3]/div/div/div[2]/table/tbody/tr/td[2]"));
+		
+		String[] array = new String[data.size()];
+		for (int i = 0; i < data.size(); i++)
+			array[i] = data.get(i).getText();
+		
+        String[] sortedArray = array.clone();
+		Arrays.sort(sortedArray);
+		
+		assertTrue(Arrays.equals(array, sortedArray));
+	}
+	
+	@Test
+	public void testSiteRev() throws Exception{
+		
+		driver.get(baseUrl + "/#/acme-pass");
+		wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("div.table-responsive")));
+		
+		String xpath = "//th[@jh-sort-by='site']";
+		driver.findElement(By.xpath(xpath)).click();
+		wait.until(ExpectedConditions.attributeContains(By.xpath(xpath + "/span[2]"), "class", "glyphicon-sort-by-attributes-alt"));
+		driver.findElement(By.xpath(xpath)).click();
+		wait.until(ExpectedConditions.attributeContains(By.xpath(xpath + "/span[2]"), "class", "glyphicon-sort-by-attributes"));
+		
+		List<WebElement> data = driver.findElements(By.xpath("/html/body/div[3]/div/div/div[2]/table/tbody/tr/td[2]"));
+		
+		String[] array = new String[data.size()];
+		
+		for (int i = 0; i < data.size(); i++)
+		array[i] = data.get(i).getText();
+		
+	    String[] sortedArray = array.clone();
+		Arrays.sort(sortedArray);
+		ArrayUtils.reverse(sortedArray);
+		
+		assertTrue(Arrays.equals(array, sortedArray));
+	}
+	
+	@Test
+	public void testLoginSort() throws Exception{
+		
+		driver.get(baseUrl + "/#/acme-pass");
+		wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("div.table-responsive")));
+			
+		String xpath = "//th[@jh-sort-by='login']";
+		driver.findElement(By.xpath(xpath)).click();
+		wait.until(ExpectedConditions.attributeContains(By.xpath(xpath + "/span[2]"), "class", "glyphicon-sort-by-attributes-alt"));
+		
+		List<WebElement> data = driver.findElements(By.xpath("/html/body/div[3]/div/div/div[2]/table/tbody/tr/td[3]"));
+		
+		String[] array = new String[data.size()];
+		
+		for (int i = 0; i < data.size(); i++)
+			array[i] = data.get(i).getText();
+		
+	    String[] sortedArray = array.clone();
+		Arrays.sort(sortedArray);
+
+		assertTrue(Arrays.equals(array, sortedArray));
+	}
+	
+	@Test
+	public void testLoginSortRev() throws Exception{
+		
+		driver.get(baseUrl + "/#/acme-pass");
+		wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("div.table-responsive")));	
+		
+		String xpath = "//th[@jh-sort-by='login']";
+		driver.findElement(By.xpath(xpath)).click();
+		wait.until(ExpectedConditions.attributeContains(By.xpath(xpath + "/span[2]"), "class", "glyphicon-sort-by-attributes-alt"));
+		driver.findElement(By.xpath(xpath)).click();
+		wait.until(ExpectedConditions.attributeContains(By.xpath(xpath + "/span[2]"), "class", "glyphicon-sort-by-attributes"));
+		
+		List<WebElement> data = driver.findElements(By.xpath("/html/body/div[3]/div/div/div[2]/table/tbody/tr/td[3]"));
+		
+		String[] array = new String[data.size()];
+		for (int i = 0; i < data.size(); i++)
+			array[i] = data.get(i).getText();
+		
+	    String[] sortedArray = array.clone();
+		Arrays.sort(sortedArray);
+		ArrayUtils.reverse(sortedArray);
+		
+		assertTrue(Arrays.equals(array, sortedArray));
+	}
+	
+	@Test
+	public void testCreateDate() throws Exception{
+
+		driver.get(baseUrl + "/#/acme-pass");
+		wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("div.table-responsive")));	
+		
+		String xpath = "//th[@jh-sort-by='createdDate']";
+		driver.findElement(By.xpath(xpath)).click();
+		wait.until(ExpectedConditions.attributeContains(By.xpath(xpath + "/span[2]"), "class", "glyphicon-sort-by-attributes-alt"));
+		
+		List<WebElement> data = driver.findElements(By.xpath("/html/body/div[3]/div/div/div[2]/table/tbody/tr/td[5]"));
+		
+		DateFormat formatter = new SimpleDateFormat("MMM d, yyyy HH:mm:ss a");
+		Date[] arrayOfDates = new Date[data.size()];
+		for (int i = 0; i < data.size(); i++)
+			arrayOfDates[i] = (Date)formatter.parse(data.get(i).getText());
+		
+	    Date[] sortedArray = arrayOfDates.clone();
+		Arrays.sort(sortedArray);
+		
+		assertTrue(Arrays.equals(arrayOfDates, sortedArray));
+	}
+	
+	@Test
+	public void testCreateDateRev() throws Exception{
+		
+		driver.get(baseUrl + "/#/acme-pass");
+		wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("div.table-responsive")));	
+		
+		String xpath = "//th[@jh-sort-by='createdDate']";
+		driver.findElement(By.xpath(xpath)).click();
+		wait.until(ExpectedConditions.attributeContains(By.xpath(xpath + "/span[2]"), "class", "glyphicon-sort-by-attributes-alt"));
+		driver.findElement(By.xpath(xpath)).click();
+		wait.until(ExpectedConditions.attributeContains(By.xpath(xpath + "/span[2]"), "class", "glyphicon-sort-by-attributes"));
+		
+		List<WebElement> data = driver.findElements(By.xpath("/html/body/div[3]/div/div/div[2]/table/tbody/tr/td[5]"));
+		
+		DateFormat formatter = new SimpleDateFormat("MMM d, yyyy HH:mm:ss a");
+		Date[] arrayOfDates = new Date[data.size()];
+		for (int i = 0; i < data.size(); i++)
+			arrayOfDates[i] = (Date)formatter.parse(data.get(i).getText());
+		
+	    Date[] sortedArray = arrayOfDates.clone();
+		Arrays.sort(sortedArray);
+		ArrayUtils.reverse(sortedArray);
+		
+		assertTrue(Arrays.equals(arrayOfDates, sortedArray));
+	}
+	
+	@Test
+	public void testModifiedDate() throws Exception{
+		
+		driver.get(baseUrl + "/#/acme-pass");
+		wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("div.table-responsive")));	
+		
+		String xpath = "//th[@jh-sort-by='lastModifiedDate']";
+		driver.findElement(By.xpath(xpath)).click();
+		wait.until(ExpectedConditions.attributeContains(By.xpath(xpath + "/span[2]"), "class", "glyphicon-sort-by-attributes-alt"));
+		
+		List<WebElement> data = driver.findElements(By.xpath("/html/body/div[3]/div/div/div[2]/table/tbody/tr/td[6]"));
+		
+		DateFormat formatter = new SimpleDateFormat("MMM d, yyyy HH:mm:ss a");
+		Date[] arrayOfDates = new Date[data.size()];
+		
+		for (int i = 0; i < data.size(); i++)
+			arrayOfDates[i] = (Date)formatter.parse(data.get(i).getText());
+		
+	    Date[] sortedArray = arrayOfDates.clone();
+		Arrays.sort(sortedArray);
+		
+		assertTrue(Arrays.equals(arrayOfDates, sortedArray));
+	}
+
+	@Test
+	public void testModifiedDateRev() throws Exception{
+		
+		driver.get(baseUrl + "/#/acme-pass");
+		wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("div.table-responsive")));	
+		
+		String xpath = "//th[@jh-sort-by='lastModifiedDate']";
+		driver.findElement(By.xpath(xpath)).click();
+		wait.until(ExpectedConditions.attributeContains(By.xpath(xpath + "/span[2]"), "class", "glyphicon-sort-by-attributes-alt"));
+		driver.findElement(By.xpath(xpath)).click();
+		wait.until(ExpectedConditions.attributeContains(By.xpath(xpath + "/span[2]"), "class", "glyphicon-sort-by-attributes"));
+		
+		List<WebElement> data = driver.findElements(By.xpath("/html/body/div[3]/div/div/div[2]/table/tbody/tr/td[6]"));
+		
+		DateFormat formatter = new SimpleDateFormat("MMM d, yyyy HH:mm:ss a");
+		Date[] arrayOfDates = new Date[data.size()];
+		
+		for (int i = 0; i < data.size(); i++)
+			arrayOfDates[i] = (Date)formatter.parse(data.get(i).getText());
+		
+	    Date[] sortedArray = arrayOfDates.clone();
+		Arrays.sort(sortedArray);
+		ArrayUtils.reverse(sortedArray);
+		
+		assertTrue(Arrays.equals(arrayOfDates, sortedArray));
+	}
+}
\ No newline at end of file
diff --git a/tests/src/tests/ToggleVisibility.java b/tests/src/tests/ToggleVisibility.java
new file mode 100644
index 0000000..becb27b
--- /dev/null
+++ b/tests/src/tests/ToggleVisibility.java
@@ -0,0 +1,125 @@
+package tests;
+
+import static org.junit.Assert.*;
+
+import java.util.concurrent.TimeUnit;
+
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.openqa.selenium.By;
+import org.openqa.selenium.WebDriver;
+import org.openqa.selenium.WebElement;
+import org.openqa.selenium.support.ui.ExpectedConditions;
+import org.openqa.selenium.support.ui.WebDriverWait;
+
+import util.ServerConfig;
+import util.WebDriverFactory;
+
+public class ToggleVisibility {
+	
+	private static WebDriver driver;
+	private static WebDriverWait wait;
+	private static String baseUrl = "http://localhost:8080";
+	
+	@BeforeClass
+	public static void setUpOnce() throws Exception {
+		if (System.getProperty("url") != null)
+			baseUrl = System.getProperty("url");
+		
+		ServerConfig.Setup(baseUrl, 5);
+
+		driver = WebDriverFactory.Create();
+		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
+		driver.manage().timeouts().pageLoadTimeout(10, TimeUnit.SECONDS);
+		driver.manage().timeouts().setScriptTimeout(5, TimeUnit.SECONDS);
+		wait = new WebDriverWait(driver, 5);
+		
+		driver.get(baseUrl + "/#/");
+		driver.findElement(By.id("login")).click();
+		driver.findElement(By.id("username")).clear();
+		driver.findElement(By.id("username")).sendKeys("test@acme.com");
+		driver.findElement(By.id("password")).clear();
+		driver.findElement(By.id("password")).sendKeys("test");
+		driver.findElement(By.cssSelector("button.btn.btn-primary")).click();
+		wait.until(ExpectedConditions.elementToBeClickable(By.id("account-menu")));
+	}
+	
+	@AfterClass
+	public static void tearDownOnce() throws Exception {
+		driver.quit();
+	}
+	
+	@Test
+	public void TestListView() throws Exception {
+		
+		driver.get(baseUrl + "/#/acme-pass");
+		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//tr[1]/td[4]/div")));
+		
+		// Record the starting state of the password display.
+		WebElement span = driver.findElement(By.xpath("//tr[1]/td[4]/div/span"));
+		WebElement input = driver.findElement(By.xpath("//tr[1]/td[4]/div/input"));;
+		String type1 = input.getAttribute("type");
+		String class1 = span.getAttribute("class");
+		
+		span.click();
+		wait.until(ExpectedConditions.not(ExpectedConditions.attributeToBe(input, "type", type1)));
+
+		// Record the toggled state of the password display.
+		String type2 = input.getAttribute("type");
+		String class2 = span.getAttribute("class");
+		
+		span.click();
+		wait.until(ExpectedConditions.not(ExpectedConditions.attributeToBe(input, "type", type2)));
+
+		// Record the returned state of the password display.
+		String type3 = input.getAttribute("type");
+		String class3 = span.getAttribute("class");
+		
+		assertNotEquals(type1, type2);
+		assertNotEquals(type2, type3);
+		assertEquals(type1, type3);
+		assertNotEquals(class1, class2);
+		assertNotEquals(class2, class3);
+		assertEquals(class1, class3);
+	}
+	
+	@Test
+	public void TestCreateView() throws Exception {
+
+		driver.get(baseUrl + "/#/acme-pass");
+		wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("button[href='#/acme-pass/new']")));
+		
+		// Open the new ACMEPass dialogue.
+		driver.findElement(By.cssSelector("button[href='#/acme-pass/new']")).click();
+		wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("input[id='field_password']")));
+		
+		WebElement input = driver.findElement(By.cssSelector("input[id='field_password']"));
+		WebElement span = input.findElement(By.xpath("../span"));
+
+		// Record the starting state of the password display.
+		String type1 = input.getAttribute("type");
+		String class1 = span.getAttribute("class");
+		
+		span.click();
+		wait.until(ExpectedConditions.not(ExpectedConditions.attributeToBe(input, "type", type1)));
+		
+		// Record the toggled state of the password display.
+		String type2 = input.getAttribute("type");
+		String class2 = span.getAttribute("class");
+		
+		span.click();
+		wait.until(ExpectedConditions.not(ExpectedConditions.attributeToBe(input, "type", type2)));
+		
+		// Record the returned state of the password display.
+		String type3 = input.getAttribute("type");
+		String class3 = span.getAttribute("class");
+		
+		assertNotEquals(type1, type2);
+		assertNotEquals(type2, type3);
+		assertEquals(type1, type3);
+		assertNotEquals(class1, class2);
+		assertNotEquals(class2, class3);
+		assertEquals(class1, class3);
+	}
+}
diff --git a/tests/src/tests/ViewACMEList.java b/tests/src/tests/ViewACMEList.java
new file mode 100644
index 0000000..eb82653
--- /dev/null
+++ b/tests/src/tests/ViewACMEList.java
@@ -0,0 +1,74 @@
+package tests;
+
+import static org.junit.Assert.*;
+
+import java.util.List;
+import java.util.concurrent.TimeUnit;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.openqa.selenium.By;
+import org.openqa.selenium.WebDriver;
+import org.openqa.selenium.WebElement;
+import org.openqa.selenium.support.ui.ExpectedConditions;
+import org.openqa.selenium.support.ui.WebDriverWait;
+
+import util.ServerConfig;
+import util.WebDriverFactory;
+
+public class ViewACMEList {
+	
+	private WebDriver driver;
+	private WebDriverWait wait;
+	private String baseUrl = "http://localhost:8080";
+	
+    @Before
+    public void setUp() throws Exception {
+		if (System.getProperty("url") != null)
+			baseUrl = System.getProperty("url");
+    	
+		ServerConfig.Setup(baseUrl, 15);
+
+		driver = WebDriverFactory.Create();
+		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
+		driver.manage().timeouts().pageLoadTimeout(10, TimeUnit.SECONDS);
+		driver.manage().timeouts().setScriptTimeout(5, TimeUnit.SECONDS);
+		wait = new WebDriverWait(driver, 5);
+
+		driver.get(baseUrl + "/#/");
+		driver.findElement(By.id("login")).click();
+		driver.findElement(By.id("username")).clear();
+		driver.findElement(By.id("username")).sendKeys("test@acme.com");
+		driver.findElement(By.id("password")).clear();
+		driver.findElement(By.id("password")).sendKeys("test");
+		driver.findElement(By.cssSelector("button.btn.btn-primary")).click();
+		wait.until(ExpectedConditions.elementToBeClickable(By.id("account-menu")));
+    }
+
+    @After
+	public void tearDown(){
+		driver.quit();
+    }
+    
+    @Test
+    public void testViewACME() {
+    	
+		driver.get(baseUrl + "/#/acme-pass");
+		wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("div.table-responsive")));
+		
+		By elementLocator = By.xpath("//tr[@ng-repeat='acmePass in vm.acmePasses track by acmePass.id']");
+		By navLocator = By.xpath("/html/body/div[3]/div/div/div[3]/jhi-item-count/div");
+		
+		// Get the number of passwords listed as reported by the interface.
+		String navMessage = driver.findElement(navLocator).getText(); // showing x - y of z items
+		String[] parts = navMessage.split(" ");
+		int elementsReported = Integer.parseInt(parts[3]);
+		
+		// Get the actual password elements showing in the interface.
+		List<WebElement> elementsListed = driver.findElements(elementLocator);
+		
+		assertEquals(elementsListed.size(), elementsReported);
+    }
+}
+
diff --git a/tests/src/util/ServerConfig.java b/tests/src/util/ServerConfig.java
new file mode 100644
index 0000000..afc3918
--- /dev/null
+++ b/tests/src/util/ServerConfig.java
@@ -0,0 +1,243 @@
+package util;
+
+import java.io.BufferedReader;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.OutputStreamWriter;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.nio.charset.StandardCharsets;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
+
+import org.apache.commons.lang3.StringUtils;
+
+import com.google.gson.JsonArray;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParser;
+
+public class ServerConfig {
+	public static void Setup(String baseUrl) throws Exception
+	{
+		Setup(baseUrl, 25);
+	}
+	
+	public static void Setup(String baseUrl, int numEntries) throws Exception
+	{
+		URL url = new URL(baseUrl);
+		
+		String token = GetXsrfToken(url);
+		System.out.println("Registering test account...");
+		RegisterTestAccount(url, token);
+		System.out.println("Logging into test account...");
+		String sessionId = LoginToTestAccount(url, token);
+		
+		System.out.println("Confirming account contents...");
+		JsonArray entries = GetEntries(url, token, sessionId);
+		System.out.println("Existing test entries: " + entries.size());
+		if (entries.size() != numEntries)
+			System.out.println(String.format("Updating account to %d entries...", numEntries));
+			
+		for (int i = entries.size(); i < numEntries; ++i)
+			AddTestEntry(url, token, sessionId);
+		for (int i = entries.size(); i > numEntries; --i) {
+			int id = entries.get(i - 1).getAsJsonObject().get("id").getAsInt();
+			DeleteEntry(url, token, sessionId, id);
+		}
+		
+		System.out.println("Test account ready for testing");
+	}
+	
+	public static String GetXsrfToken(URL baseUrl) throws Exception
+	{
+		HttpURLConnection connection = (HttpURLConnection) baseUrl.openConnection();
+		connection.setRequestMethod("GET");
+		
+		List<String> cookies = connection.getHeaderFields().get("Set-Cookie");
+		String xsrfToken = "";
+		if (cookies != null)
+			for (String cookie : cookies)
+				if (cookie.startsWith("XSRF-TOKEN"))
+					xsrfToken = cookie.split(";")[0].split("=", 2)[1];
+		
+		return xsrfToken;
+	}
+	
+	public static void RegisterTestAccount(URL baseUrl, String token) throws Exception
+	{
+		URL url = new URL(baseUrl, "api/register");
+		HttpURLConnection connection = (HttpURLConnection) url.openConnection();
+		connection.setDoOutput(true);
+		connection.setDoInput(true);
+		connection.setRequestMethod("POST");
+		connection.setRequestProperty("Content-Type", "application/json");
+		connection.setRequestProperty("Cookie", "XSRF-TOKEN="+token);
+		connection.setRequestProperty("X-XSRF-TOKEN", token);
+		
+		JsonObject obj = new JsonObject();
+		obj.addProperty("email", "test@acme.com");
+		obj.addProperty("langKey", "en");
+		obj.addProperty("login", "test@acme.com");
+		obj.addProperty("password", "test");
+		
+		OutputStreamWriter writer = new OutputStreamWriter(connection.getOutputStream());
+		writer.write(obj.toString());
+		writer.flush();
+		writer.close();
+
+		int code = connection.getResponseCode();
+		if (code == 200) {
+			System.out.println("Registered new account: test@acme.com");
+		} else {
+			String response = GetResponseError(connection);
+			if (response.toString().startsWith("login already in use")) {
+				System.out.println("Account already registered...");
+			} else {
+				System.out.println("Registration error...");
+				System.out.println("code: " + code);
+			}
+		}
+	}
+	
+	public static String LoginToTestAccount(URL baseUrl, String token) throws Exception
+	{
+		URL url = new URL(baseUrl, "api/authentication");
+		HttpURLConnection connection = (HttpURLConnection) url.openConnection();
+		connection.setDoOutput(true);
+		connection.setDoInput(true);
+		connection.setRequestMethod("POST");
+		connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
+		connection.setRequestProperty("Cookie", "XSRF-TOKEN="+token);
+		connection.setRequestProperty("X-XSRF-TOKEN", token);
+		
+		ArrayList<String> parameters = new ArrayList<String>();
+		parameters.add("j_username=test@acme.com");
+		parameters.add("j_password=test");
+		parameters.add("remember-me=true");
+		parameters.add("submit=Login");
+		String parameterList = StringUtils.join(parameters, '&');
+
+		OutputStreamWriter writer = new OutputStreamWriter(connection.getOutputStream());
+		writer.write(parameterList);
+		writer.flush();
+		writer.close();
+		
+		int code = connection.getResponseCode();
+		if (code == 200) {
+			System.out.println("Login OK");
+			
+			List<String> cookies = connection.getHeaderFields().get("Set-Cookie");
+			String sessionId = "";
+			if (cookies != null)
+				for (String cookie : cookies)
+					if (cookie.startsWith("JSESSIONID"))
+						sessionId = cookie.split(";")[0].split("=", 2)[1];
+			
+			return sessionId;
+		} else {
+			System.out.println("Login error...");
+			System.out.println("code: " + code);
+			return "";
+		}
+	}
+	
+	public static JsonArray GetEntries(URL baseUrl, String token, String sessionId) throws Exception
+	{
+		URL url = new URL(baseUrl, "api/acme-passes?page=0&size=999");
+		HttpURLConnection connection = (HttpURLConnection) url.openConnection();
+		connection.setRequestMethod("GET");
+		connection.setRequestProperty("Cookie", "XSRF-TOKEN="+token + "; JSESSIONID=" + sessionId);
+		connection.setRequestProperty("X-XSRF-TOKEN", token);
+
+		int code = connection.getResponseCode();
+		if (code == 200) {
+			String content = GetResponseContent(connection);
+			JsonParser parser = new JsonParser();
+			return parser.parse(content).getAsJsonArray();
+		} else {
+			System.out.println("Connection failure...");
+			System.out.println("code: " + code);
+			return null;
+		}
+	}
+	
+	public static void AddTestEntry(URL baseUrl, String token, String sessionId) throws Exception
+	{
+		URL url = new URL(baseUrl, "api/acme-passes?page=0&size=999");
+		HttpURLConnection connection = (HttpURLConnection) url.openConnection();
+		connection.setDoOutput(true);
+		connection.setDoInput(true);
+		connection.setRequestMethod("POST");
+		connection.setRequestProperty("Content-Type", "application/json");
+		connection.setRequestProperty("Cookie", "XSRF-TOKEN="+token + "; JSESSIONID=" + sessionId);
+		connection.setRequestProperty("X-XSRF-TOKEN", token);
+		
+		int num = new Random().nextInt(1000);
+		String key = String.format("test_%03d", num);
+		JsonObject obj = new JsonObject();
+		obj.addProperty("login", key);
+		obj.addProperty("password", key);
+		obj.addProperty("site", key);
+		
+		OutputStreamWriter writer = new OutputStreamWriter(connection.getOutputStream());
+		writer.write(obj.toString());
+		writer.flush();
+		writer.close();
+
+		int code = connection.getResponseCode();
+		if (code == 200 || code == 201) {
+			//
+		} else {
+			System.out.println("Connection failure...");
+			System.out.println("code: " + code);
+		}
+	}
+	
+	public static void DeleteEntry(URL baseUrl, String token, String sessionId, int id) throws Exception
+	{
+		URL url = new URL(baseUrl, "api/acme-passes/" + id);
+		HttpURLConnection connection = (HttpURLConnection) url.openConnection();
+		connection.setRequestMethod("DELETE");
+		connection.setRequestProperty("Cookie", "XSRF-TOKEN="+token + "; JSESSIONID=" + sessionId);
+		connection.setRequestProperty("X-XSRF-TOKEN", token);
+
+		int code = connection.getResponseCode();
+		if (code == 200 || code == 204) {
+			//
+		} else {
+			System.out.println("Connection failure...");
+			System.out.println("code: " + code);
+		}
+	}
+	
+	public static String GetResponseContent(HttpURLConnection connection) throws Exception
+	{
+		String line;
+		StringBuffer response = new StringBuffer();
+		InputStreamReader reader = new InputStreamReader(connection.getInputStream());
+		BufferedReader bufferedReader = new BufferedReader(reader);
+		while ((line = bufferedReader.readLine()) != null) {
+		    response.append(line);
+		    response.append('\r');
+		}
+		bufferedReader.close();
+		
+		return response.toString();
+	}
+	
+	public static String GetResponseError(HttpURLConnection connection) throws Exception
+	{
+		String line;
+		StringBuffer response = new StringBuffer();
+		InputStreamReader reader = new InputStreamReader(connection.getErrorStream());
+		BufferedReader bufferedReader = new BufferedReader(reader);
+		while ((line = bufferedReader.readLine()) != null) {
+		    response.append(line);
+		    response.append('\r');
+		}
+		bufferedReader.close();
+		
+		return response.toString();
+	}
+}
diff --git a/tests/src/util/WebDriverFactory.java b/tests/src/util/WebDriverFactory.java
new file mode 100644
index 0000000..5ad43c3
--- /dev/null
+++ b/tests/src/util/WebDriverFactory.java
@@ -0,0 +1,21 @@
+package util;
+
+import org.openqa.selenium.WebDriver;
+import org.openqa.selenium.chrome.ChromeDriver;
+import org.openqa.selenium.firefox.FirefoxDriver;
+
+public class WebDriverFactory {
+	public static WebDriver Create() {
+		String driverType = System.getProperty("test.driver");
+		
+		if (System.getProperty("webdriver.gecko.driver") == null)
+			System.setProperty("webdriver.gecko.driver", "bin/geckodriver");
+		
+		if (driverType == "firefox")
+			return new FirefoxDriver();
+		else if (driverType == "chrome")
+			return new ChromeDriver();
+					
+		return new FirefoxDriver();
+	}
+}
